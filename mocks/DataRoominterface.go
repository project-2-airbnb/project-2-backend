// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	rooms "project-2/features/rooms"

	mock "github.com/stretchr/testify/mock"
)

// DataRoominterface is an autogenerated mock type for the DataRoominterface type
type DataRoominterface struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: room
func (_m *DataRoominterface) CreateRoom(room rooms.Room) error {
	ret := _m.Called(room)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(rooms.Room) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: roomid
func (_m *DataRoominterface) DeleteRoom(roomid uint) error {
	ret := _m.Called(roomid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(roomid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRooms provides a mock function with given fields:
func (_m *DataRoominterface) GetAllRooms() ([]rooms.Room, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllRooms")
	}

	var r0 []rooms.Room
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]rooms.Room, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []rooms.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Room)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomByName provides a mock function with given fields: roomName
func (_m *DataRoominterface) GetRoomByName(roomName string) ([]rooms.Room, error) {
	ret := _m.Called(roomName)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomByName")
	}

	var r0 []rooms.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]rooms.Room, error)); ok {
		return rf(roomName)
	}
	if rf, ok := ret.Get(0).(func(string) []rooms.Room); ok {
		r0 = rf(roomName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: room
func (_m *DataRoominterface) UpdateRoom(room rooms.Room) (rooms.Room, error) {
	ret := _m.Called(room)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 rooms.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(rooms.Room) (rooms.Room, error)); ok {
		return rf(room)
	}
	if rf, ok := ret.Get(0).(func(rooms.Room) rooms.Room); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Get(0).(rooms.Room)
	}

	if rf, ok := ret.Get(1).(func(rooms.Room) error); ok {
		r1 = rf(room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataRoominterface creates a new instance of DataRoominterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataRoominterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataRoominterface {
	mock := &DataRoominterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
